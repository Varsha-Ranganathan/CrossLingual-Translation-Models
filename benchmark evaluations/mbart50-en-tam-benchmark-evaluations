{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9075059,"sourceType":"datasetVersion","datasetId":5474457},{"sourceId":9075083,"sourceType":"datasetVersion","datasetId":5474478}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install datasets transformers torch accelerate sacremoses sacrebleu --quiet","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-01T04:11:01.409106Z","iopub.execute_input":"2024-08-01T04:11:01.409873Z","iopub.status.idle":"2024-08-01T04:11:16.384776Z","shell.execute_reply.started":"2024-08-01T04:11:01.409831Z","shell.execute_reply":"2024-08-01T04:11:16.383650Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import torch, os\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nos.environ[\"WANDB_DISABLED\"] = \"true\"","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:11:16.394050Z","iopub.execute_input":"2024-08-01T04:11:16.394581Z","iopub.status.idle":"2024-08-01T04:11:19.542760Z","shell.execute_reply.started":"2024-08-01T04:11:16.394543Z","shell.execute_reply":"2024-08-01T04:11:19.541886Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"from transformers import MBart50Tokenizer,MBartForConditionalGeneration\nmodel_name ='/kaggle/input/tamil-val'\ntokenizer = MBart50Tokenizer.from_pretrained(model_name)\n# Load the model\nmodel = MBartForConditionalGeneration.from_pretrained(model_name)\nmodel.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:11:19.543854Z","iopub.execute_input":"2024-08-01T04:11:19.544252Z","iopub.status.idle":"2024-08-01T04:11:40.540260Z","shell.execute_reply.started":"2024-08-01T04:11:19.544221Z","shell.execute_reply":"2024-08-01T04:11:40.539348Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"MBartForConditionalGeneration(\n  (model): MBartModel(\n    (shared): Embedding(250054, 1024, padding_idx=1)\n    (encoder): MBartEncoder(\n      (embed_tokens): MBartScaledWordEmbedding(250054, 1024, padding_idx=1)\n      (embed_positions): MBartLearnedPositionalEmbedding(1026, 1024)\n      (layers): ModuleList(\n        (0-11): 12 x MBartEncoderLayer(\n          (self_attn): MBartAttention(\n            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=1024, out_features=4096, bias=True)\n          (fc2): Linear(in_features=4096, out_features=1024, bias=True)\n          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n      (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n    )\n    (decoder): MBartDecoder(\n      (embed_tokens): MBartScaledWordEmbedding(250054, 1024, padding_idx=1)\n      (embed_positions): MBartLearnedPositionalEmbedding(1026, 1024)\n      (layers): ModuleList(\n        (0-11): 12 x MBartDecoderLayer(\n          (self_attn): MBartAttention(\n            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n          (encoder_attn): MBartAttention(\n            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=1024, out_features=4096, bias=True)\n          (fc2): Linear(in_features=4096, out_features=1024, bias=True)\n          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n      (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n    )\n  )\n  (lm_head): Linear(in_features=1024, out_features=250054, bias=False)\n)"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n# Load your dataset (assuming it's a CSV file with an 'english' column)\ndf = pd.read_csv('/kaggle/input/tatoeba-tamil/Tatoeba-tamil.csv')\nenglish_sentences = df['English'].tolist()\ntamil_sentences = df['Tamil'].to_list()","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:11:40.541665Z","iopub.execute_input":"2024-08-01T04:11:40.542080Z","iopub.status.idle":"2024-08-01T04:11:41.008064Z","shell.execute_reply.started":"2024-08-01T04:11:40.542054Z","shell.execute_reply":"2024-08-01T04:11:41.006962Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"import sacrebleu\n\n# Function to generate translation for a given input text\ndef generate_translation(input_text):\n    input_ids = tokenizer(input_text, return_tensors=\"pt\").input_ids.to(device)\n    with torch.no_grad():\n        output_ids = model.generate(input_ids)\n    output_text = tokenizer.decode(output_ids[0], skip_special_tokens=True)\n    return output_text\n\n\ntranslations = []\nreferences = []\nfor i in range(0, len(english_sentences)):\n    translations.append(generate_translation(english_sentences[i]))\n    references.append([tamil_sentences[i]])\n\n# Calculate BLEU score\nbleu = sacrebleu.corpus_bleu(translations, references)\nprint(f\"BLEU score: {bleu.score}\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:11:41.009571Z","iopub.execute_input":"2024-08-01T04:11:41.009969Z","iopub.status.idle":"2024-08-01T04:13:28.697325Z","shell.execute_reply.started":"2024-08-01T04:11:41.009929Z","shell.execute_reply":"2024-08-01T04:13:28.696348Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"BLEU score: 14.058533129758727\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install tqdm\nfrom tqdm import tqdm","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:15:06.783880Z","iopub.execute_input":"2024-08-01T04:15:06.784288Z","iopub.status.idle":"2024-08-01T04:15:19.445386Z","shell.execute_reply.started":"2024-08-01T04:15:06.784256Z","shell.execute_reply":"2024-08-01T04:15:19.444341Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (4.66.4)\n","output_type":"stream"}]},{"cell_type":"code","source":"translations = []\nreferences = []\nfor i in tqdm(range(0, len(english_sentences)), desc=\"Translating\"):\n    translations.append(generate_translation(english_sentences[i]))\n    references.append(tamil_sentences[i])  # For chrF++, references should be a flat list\n\n# Calculate chrF++ score\nchrf = sacrebleu.corpus_chrf(translations, references)\nprint(f\"chrF++ score: {chrf.score}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:17:07.332639Z","iopub.execute_input":"2024-08-01T04:17:07.333113Z","iopub.status.idle":"2024-08-01T04:18:55.011797Z","shell.execute_reply.started":"2024-08-01T04:17:07.333076Z","shell.execute_reply":"2024-08-01T04:18:55.010624Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"Translating: 100%|██████████| 356/356 [01:47<00:00,  3.31it/s]\n","output_type":"stream"},{"name":"stdout","text":"chrF++ score: 10.94890510948905\n","output_type":"stream"}]},{"cell_type":"code","source":"from datasets import load_dataset\n\n# download and load specific pairs\ndataset = load_dataset(\"ai4bharat/IN22-Gen\", \"eng_Latn-tam_Taml\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:18:55.014418Z","iopub.execute_input":"2024-08-01T04:18:55.014757Z","iopub.status.idle":"2024-08-01T04:19:03.996454Z","shell.execute_reply.started":"2024-08-01T04:18:55.014725Z","shell.execute_reply":"2024-08-01T04:19:03.995710Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/7.59k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7d2e8eba3c1d47adb935f2ac5f137639"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading readme:   0%|          | 0.00/7.60k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1481ba2456fa4dc9a5fddfb47b0e3b47"}},"metadata":{}},{"output_type":"stream","name":"stdin","text":"The repository for ai4bharat/IN22-Gen contains custom code which must be executed to correctly load the dataset. You can inspect the repository content at https://hf.co/datasets/ai4bharat/IN22-Gen.\nYou can avoid this prompt in future by passing the argument `trust_remote_code=True`.\n\nDo you wish to run the custom code? [y/N]  y\n"},{"output_type":"display_data","data":{"text/plain":"Downloading data:   0%|          | 0.00/3.36M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"08e2f917886f4375af9b8f83e6545bb1"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Generating gen split: 0 examples [00:00, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b7075018175f4c04a4a34951fc995988"}},"metadata":{}}]},{"cell_type":"code","source":"dataset","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:19:03.997740Z","iopub.execute_input":"2024-08-01T04:19:03.998408Z","iopub.status.idle":"2024-08-01T04:19:04.005008Z","shell.execute_reply.started":"2024-08-01T04:19:03.998373Z","shell.execute_reply":"2024-08-01T04:19:04.003867Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"DatasetDict({\n    gen: Dataset({\n        features: ['id', 'context', 'source', 'url', 'domain', 'num_words', 'bucket', 'sentence_eng_Latn', 'sentence_tam_Taml'],\n        num_rows: 1024\n    })\n})"},"metadata":{}}]},{"cell_type":"code","source":"# Assuming 'sentence_eng_Latn' is the English column and 'sentence_hin_Deva' is the Hindi column\nenglish_sentences = dataset['gen']['sentence_eng_Latn']\ntamil_sentences = dataset['gen']['sentence_tam_Taml']\n\n# Convert them to lists\nenglish_sentences = list(english_sentences)\ntamil_sentences = list(tamil_sentences)\n\n# Verify the first few elements of each list\nprint(english_sentences[:5])\nprint(tamil_sentences[:5])\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:19:04.006183Z","iopub.execute_input":"2024-08-01T04:19:04.006487Z","iopub.status.idle":"2024-08-01T04:19:04.022791Z","shell.execute_reply.started":"2024-08-01T04:19:04.006462Z","shell.execute_reply":"2024-08-01T04:19:04.021610Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"['An appearance is a bunch of attributes related to the service person, like their shoes, clothes, tie, jewellery, hairstyle, make-up, watch, cosmetics, perfume, etc.', 'Ajanta, located in the Aurangabad District of Maharashtra has twenty-nine caitya and vihara caves decorated with sculptures and paintings from the first century B.C.E. to the fifth century C.E.', 'Body colour gets merged with the outer line, creating the effect of volume.', 'Ashoka started making extensive use of stone for sculptures and great monuments, whereas the previous tradition consisted of working with wood and clay.', 'Potatoes mixed in masalas, coated in besan batter and deep fried to perfection form this delicious and famous dish of Maharashtra.']\n['தோற்றம் என்பது சேவை ஊழியரின் காலணிகள், உடை, டை, நகை, சிகையலங்காரம், மேக்-அப், கைக்கடிகாரம், அழகு சாதனங்கள், நறுமணம் போன்ற அவர் சார்ந்த பண்புகளின் ஒரு தொகுப்பைக் குறிக்கிறது.', 'மகாராஷ்டிரத்தின் அவுரங்காபாத் மாவட்டத்தில் உள்ள அஜந்தாவில் இருபத்தி ஒன்பது சைத்யா மற்றும் விஹாரா குகைகள் உள்ளன, அவற்றை கிமு முதலாம் நூற்றாண்டு முதல் கிபி ஐந்தாம் நூற்றாண்டு வரையிலான சிற்பங்களும் ஓவியங்களும் அலங்கரித்துள்ளன.', 'உடல் நிறம் ஓரங்களுடன் கலந்து பருமனான தோற்றத்தைத் தருகிறது.', 'சிற்பங்களுக்கும் மாபெரும் நினைவுச் சின்னங்களுக்கும் அசோகர் பெரியளவில் கற்களைப் பயன்படுத்தத் தொடங்கினார், ஆனால் அதற்கு முன்பு மரம் மற்றும் களிமண்ணைப் பயன்படுத்துவதே மரபாக இருந்தது.', 'மகாராஷ்டிராவின் இந்தப் புகழ்பெற்ற அறுசுவை உணவில், மசாலாக்களுடன் பிசைந்து கடலைமாவில் துவைத்து எண்ணெயில் பூரணமாகப் பொரித்த உருளைக்கிழங்குகள் உள்ளன.']\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch, os\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:19:04.024180Z","iopub.execute_input":"2024-08-01T04:19:04.024512Z","iopub.status.idle":"2024-08-01T04:19:04.029496Z","shell.execute_reply.started":"2024-08-01T04:19:04.024479Z","shell.execute_reply":"2024-08-01T04:19:04.028493Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"from transformers import MBart50Tokenizer,MBartForConditionalGeneration\nmodel_name ='/kaggle/input/tamil-val'\ntokenizer = MBart50Tokenizer.from_pretrained(model_name)\n# Load the model\nmodel = MBartForConditionalGeneration.from_pretrained(model_name)\nmodel.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:19:04.030629Z","iopub.execute_input":"2024-08-01T04:19:04.030918Z","iopub.status.idle":"2024-08-01T04:19:11.637749Z","shell.execute_reply.started":"2024-08-01T04:19:04.030894Z","shell.execute_reply":"2024-08-01T04:19:11.636730Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"MBartForConditionalGeneration(\n  (model): MBartModel(\n    (shared): Embedding(250054, 1024, padding_idx=1)\n    (encoder): MBartEncoder(\n      (embed_tokens): MBartScaledWordEmbedding(250054, 1024, padding_idx=1)\n      (embed_positions): MBartLearnedPositionalEmbedding(1026, 1024)\n      (layers): ModuleList(\n        (0-11): 12 x MBartEncoderLayer(\n          (self_attn): MBartAttention(\n            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n          )\n          (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n          (activation_fn): ReLU()\n          (fc1): Linear(in_features=1024, out_features=4096, bias=True)\n          (fc2): Linear(in_features=4096, out_features=1024, bias=True)\n          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n      (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n    )\n    (decoder): MBartDecoder(\n      (embed_tokens): MBartScaledWordEmbedding(250054, 1024, padding_idx=1)\n      (embed_positions): MBartLearnedPositionalEmbedding(1026, 1024)\n      (layers): ModuleList(\n        (0-11): 12 x MBartDecoderLayer(\n          (self_attn): MBartAttention(\n            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n          )\n          (activation_fn): ReLU()\n          (self_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n          (encoder_attn): MBartAttention(\n            (k_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (v_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (q_proj): Linear(in_features=1024, out_features=1024, bias=True)\n            (out_proj): Linear(in_features=1024, out_features=1024, bias=True)\n          )\n          (encoder_attn_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n          (fc1): Linear(in_features=1024, out_features=4096, bias=True)\n          (fc2): Linear(in_features=4096, out_features=1024, bias=True)\n          (final_layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n        )\n      )\n      (layernorm_embedding): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n      (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)\n    )\n  )\n  (lm_head): Linear(in_features=1024, out_features=250054, bias=False)\n)"},"metadata":{}}]},{"cell_type":"code","source":"import sacrebleu\nfrom tqdm import tqdm\n\n# Function to generate translation for a given input text\ndef generate_translation(input_text):\n    input_ids = tokenizer(input_text, return_tensors=\"pt\").input_ids.to(device)\n    with torch.no_grad():\n        output_ids = model.generate(input_ids)\n    output_text = tokenizer.decode(output_ids[0], skip_special_tokens=True)\n    return output_text\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:19:11.640434Z","iopub.execute_input":"2024-08-01T04:19:11.640738Z","iopub.status.idle":"2024-08-01T04:19:11.646562Z","shell.execute_reply.started":"2024-08-01T04:19:11.640712Z","shell.execute_reply":"2024-08-01T04:19:11.645585Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"translations = []\nreferences = []\nfor i in tqdm(range(0, len(english_sentences)), desc=\"Translating\"):\n    translations.append(generate_translation(english_sentences[i]))\n    references.append([tamil_sentences[i]])\n\n# Calculate BLEU score\nbleu = sacrebleu.corpus_bleu(translations, references)\nprint(f\"BLEU score: {bleu.score}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:19:11.647808Z","iopub.execute_input":"2024-08-01T04:19:11.648165Z","iopub.status.idle":"2024-08-01T04:38:55.641194Z","shell.execute_reply.started":"2024-08-01T04:19:11.648116Z","shell.execute_reply":"2024-08-01T04:38:55.640215Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stderr","text":"Translating: 100%|██████████| 1024/1024 [19:43<00:00,  1.16s/it]\n","output_type":"stream"},{"name":"stdout","text":"BLEU score: 10.161064908809763\n","output_type":"stream"}]},{"cell_type":"code","source":"translations = []\nreferences = []\nfor i in tqdm(range(0, len(english_sentences)), desc=\"Translating\"):\n    translations.append(generate_translation(english_sentences[i]))\n    references.append(tamil_sentences[i])  # For chrF++, references should be a flat list\n\n# Calculate chrF++ score\nchrf = sacrebleu.corpus_chrf(translations, references)\nprint(f\"chrF++ score: {chrf.score}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-01T04:38:55.642497Z","iopub.execute_input":"2024-08-01T04:38:55.642800Z","iopub.status.idle":"2024-08-01T04:58:44.559996Z","shell.execute_reply.started":"2024-08-01T04:38:55.642775Z","shell.execute_reply":"2024-08-01T04:58:44.559040Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stderr","text":"Translating: 100%|██████████| 1024/1024 [19:44<00:00,  1.16s/it]\n","output_type":"stream"},{"name":"stdout","text":"chrF++ score: 4.118404118404119\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
